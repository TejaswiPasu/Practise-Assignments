NumPy tasks
1.a)
	Create a 1D array of numbers from 10 to 50.
import numpy as np
arr=np.arange(10,51)
print(arr)

b)Create a 3x3 array of random numbers between 0 and 1.

import numpy as np

# Correctly defining the 3D array
arr = np.array([[[0.1, 0.2, 0.3],
                 [0.4, 0.5, 0.6],
                 [0.7, 0.8, 0.9]]])

print(arr)

==============================================================================================

2.a)	Find the shape, size, and data type of the array you created in the previous task.
import numpy as np

# Define the 3D array
arr = np.array([[[0.1, 0.2, 0.3],
                 [0.4, 0.5, 0.6],
                 [0.7, 0.8, 0.9]]])

# Print the shape of the array
print('shape:', arr.shape)
print('size',arr.size)
print('data types',arr.dtype)

===============================================================================================================
3.a)add 5 to each element of array
import numpy as np

# Create a NumPy array
arr = np.array([1, 2, 3, 4])

# Add 5 to each element
new_arr = arr + 5

print("Original Array:", arr)
print("New Array:", new_arr)

b)	Multiply two 2D arrays element-wise.
import numpy as np

# Define the 3D array
arr = np.array([[[0.1, 0.2, 0.3],
                 [0.4, 0.5, 0.6],
                 [0.7, 0.8, 0.9]]])

arr1 = np.array([[2, 1, 3],
                 [3, 2, 1]])

# Expand the dimensions of arr1 to match arr
arr1_expanded = np.expand_dims(arr1, axis=0)

# Multiply element-wise
result = arr * arr1_expanded

print(result)
============================================================================================================
4)	Create a 5x5 array of integers from 1 to 25. Extract:
	The first row.
	The last column.
	A subarray of the first three rows and first two columns.
import numpy as np

# Create a 5x5 array of integers from 1 to 25
arr = np.arange(1, 26).reshape(5, 5)

# Extract the first row
first_row = arr[0, :]

# Extract the last column
last_column = arr[:, -1]

# Extract a subarray of the first three rows and first two columns
subarray = arr[:3, :2]

# Print results
print("Original Array:\n", arr)
print("\nFirst Row:\n", first_row)
print("\nLast Column:\n", last_column)
print("\nSubarray (First Three Rows, First Two Columns):\n", subarray)
======================================================================================================================
5)	Create a 10-element array of random integers between 1 and 100. Find:
	The maximum value.
	The minimum value.
	The mean and standard deviation

import numpy as np

# Create a 10-element array of random integers between 1 and 100
arr = np.random.randint(1, 101, 10)

# Calculate the maximum value
max_value = np.max(arr)

# Calculate the minimum value
min_value = np.min(arr)

# Calculate the mean
mean_value = np.mean(arr)

# Calculate the standard deviation
std_deviation = np.std(arr)

# Print results
print("Array:", arr)
print("Maximum Value:", max_value)
print("Minimum Value:", min_value)
print("Mean:", mean_value)
print("Standard Deviation:", std_deviation)
=======================================================================================================================================
6)	Convert a 1D array of numbers from 1 to 12 into a 3x4 matrix.
import numpy as np

# Create a 1D array of numbers from 1 to 12
arr_1d = np.arange(1, 13)

# Convert it into a 3x4 matrix
matrix_3x4 = arr_1d.reshape(3, 4)

# Print the result
print("1D Array:", arr_1d)
print("\n3x4 Matrix:\n", matrix_3x4)
===============================================================================================================================================
7)	Create a 3x3 matrix of ones. Add a 1D array [1, 2, 3] to each row.
import numpy as np

# Create a 3x3 matrix of ones
matrix_ones = np.ones((3, 3))

# Create the 1D array
array_1d = np.array([1, 2, 3])

# Add the 1D array to each row of the matrix (using broadcasting)
result_matrix = matrix_ones + array_1d

# Print the result
print("Matrix of Ones:\n", matrix_ones)
print("\nResulting Matrix after Addition:\n", result_matrix)
====================================================================================================================================================
8)	Create a 1D array of random integers between 1 and 50. Extract all elements that are divisible by 5.
import numpy as np

# Create a 1D array of random integers between 1 and 50
arr = np.random.randint(1, 51, 20)  # Generate 20 random integers between 1 and 50

# Extract elements divisible by 5
div_by_5 = arr[arr % 5 == 0]

# Print the result
print("Original Array:", arr)
print("\nElements Divisible by 5:", div_by_5)
=======================================================================================================================================================
9)	Create two 2x2 matrices and perform matrix multiplication.
import numpy as np

# Create two 2x2 matrices
matrix_1 = np.array([[1, 2],
                     [3, 4]])

matrix_2 = np.array([[5, 6],
                     [7, 8]])

# Perform matrix multiplication
result = np.dot(matrix_1, matrix_2)  # Or use: result = matrix_1 @ matrix_2

# Print the result
print("Matrix 1:\n", matrix_1)
print("\nMatrix 2:\n", matrix_2)
print("\nResult of Matrix Multiplication:\n", result)
=============================================================================================================================================================
10)	Given a 4x4 array, use fancy indexing to extract the diagonal elements.
import numpy as np

# Create a 4x4 array
arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

# Use fancy indexing to extract the diagonal elements
diagonal_elements = arr[np.arange(4), np.arange(4)]

# Print the result
print("Original Array:\n", arr)
print("\nDiagonal Elements:", diagonal_elements)

